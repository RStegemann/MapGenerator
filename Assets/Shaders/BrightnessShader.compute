// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
Texture2D Input;
float Brightness;

float Epsilon = 1e-10;

float3 HUEtoRGB(in float H)
{
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    return saturate(float3(R, G, B));
}

float3 HSVtoRGB(in float3 HSV)
{
    float3 RGB = HUEtoRGB(HSV.x);
    return ((RGB - 1) * HSV.y + 1) * HSV.z;

}

float3 RGBtoHCV(in float3 RGB)
{
    float4 P = (RGB.x < RGB.y) ? float4(RGB.zy, -1.0, 2.0 / 3.0) : float4(RGB.yz, 0.0, -1.0 / 3.0);
    float4 Q = (RGB.x < P.x) ? float4(P.xyw, RGB.x) : float4(RGB.x, P.yzw);
    float C = Q.x - min(Q.w, Q.y);
    float H = abs((Q.w - Q.y) / (6 * C + Epsilon) + Q.z);
    return float3(H, C, Q.x);
}

float3 RGBtoHSV(in float3 RGB)
{
    float3 HCV = RGBtoHCV(RGB);
    float S = HCV.y / (HCV.z + Epsilon);
    return float3(HCV.x, S, HCV.z);
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float3 hsv = RGBtoHSV(Input[id.xy].xyz);
    Result[id.xy] = float4(HSVtoRGB(float3(hsv.xyz)), 1);
}
